=encoding UTF-8

=head1 NAME

Test::CGI::External - run tests on an external CGI program

=head1 SYNOPSIS

    use Test::More;
    use Test::CGI::External;

    my $tester = Test::CGI::External->new ();

    $tester->set_cgi_executable ("x.cgi");

    my %options;

    # Automatically tests

    $tester->run (\%options);

    # Test with a query

    $options{REQUEST_METHOD} = 'GET';
    $options{QUERY_STRING} = 'text="alcohol"';
    $tester->run (\%options);

    # Test compression of output

    $tester->do_compression_test (1);
    $tester->run (\%options);

    # Print the plan.

    $tester->plan ();

    done_testing ();

After the test has run, the uncompressed output is in
C<$options{body}>.

=head1 DESCRIPTION

Test::CGI::External is a tool for running basic checks of the
operation of a CGI (common gateway interface) program. It is meant to
be used for "sanity checks" of CGI program operation. For example, if
a CGI program prints stuff on standard output before it prints its
HTTP headers, when running from behind a server, the only output
visible from a browser is an obscure server error message.

In a Perl script,

    use Test::More;
    my $tester = Test::CGI::External->new ();
    $tester->set_cgi_executable ('example.cgi');
    $tester->run ({});
    done_testing ();

The above tests whether

=over

=item * there is a program called F<example.cgi>

=item * the program F<example.cgi> is executable (except on Windows)

=item * when run, F<example.cgi> produces a correct C<Content-Type> header

=item * when run, F<example.cgi> does not print out ill-formed headers (for example, print
debugging messages on standard output)

=item * when run, F<example.cgi> exits with a zero status

=item * when run, F<example.cgi> does not print any error messages

=back

In other words, this tests for extremely simple "slip-up" mistakes and
basic program execution.

Test::CGI::External runs CGI programs as stand-alone programs, under a
faked CGI-like environment created by manipulating environment
variables. Thus it does not require a web server.  The tested CGI
program can be in any language, not just Perl; Test::CGI::External is
meant to test external programs which are completely independent of
itself. Test::CGI::External was originally created to check the
operation of CGI programs written in C.

Test::CGI::External is meant for the testing stage before the program
is put onto a web server. One of the main errors this module catches
for the author is stray printf statements. If a program with stray
printf statements is uploaded to the web server and run as a CGI
program, the browser will show only a 500 Server Error
message. Another typical mistake is forgetting to make the CGI program
executable; again, this results in a weird server error.

Test::CGI::External is TAP (Test Anything Protocol)-compliant and
should work with Perl testing modules like L<Test::More>.

=head1 METHODS

=head2 do_caching_test

    $tester->do_caching_test (1);

Turn on or off testing of caching. If this test is "on", the CGI
executable will be tested for producing a "Last-Modified: " header
with a correctly-formatted date, and to be able to respond with a 304
"Not modified" response when sent a date later than its
"Last-Modified" date.

=head2 do_compression_test

    $tester->do_compression_test (1);

Turn on or off testing of compression of the output of the CGI program
which is being tested. Give any true value as the first argument to
turn on compression testing. Give any false value to turn off
compression testing. Tests are done via L<Gzip::Faster>.

Prior to version 0.07 of this module, these tests were done by
L<IO::Uncompress::Gunzip>.

=head2 expect_charset

    $tester->expect_charset ('UTF-8');

Tell the tester to test whether the header declares the output
character set correctly. 

If you set expect charset, then the body of the output is upgraded
from that encoding into Perl's Unicode encoding, C<utf8>. Unless the
encoding is UTF-8, that upgrading is also added as a pass or fail
test:

    $tester->expect_charset ('EUC-JP');

adds a test for decoding from the EUC-JP encoding.  

This behaviour is new in version 0.08 of this module. Prior to version
0.08, C<$output{body}> was not upgraded to C<utf8>.

=head2 set_html_validator

    $tester->set_html_validator ('./my-favourite-validator.pl');

Set an HTML validator. The validator should be a standalone
program. It should take take arguments of file names to validate, and
print out to standard output the errors it finds. It should print
nothing if it doesn't find any errors. Empty output from the HTML
validator program is regarded as successful completion. The error
output of the HTML validator is discarded.

This interface was added in version 0.10 of this module.

=head2 new

    my $tester = Test::CGI::External->new ();

Create a new testing object.

=head2 plan

Print the TAP (Test Anything Protocol) plan. This has to be done at
the end of the execution. You usually don't have to print this but can
use "done_testing" from L<Test::More> since this module uses
L<Test::Builder> internally.

=head2 run

    my %options;
    $options{QUERY_STRING} = "q=rupert+the+bear";
    $tester->run (\%options);

Run the cgi executable specified using L</set_cgi_executable> with the
inputs specified in C<%options>. See L</Possible options> for possible
options. See L</Outputs> for outputs.

=head2 set_cgi_executable

    $tester->set_cgi_executable ('my.cgi');

Set the CGI program to be tested to F<my.cgi>. This checks whether the
file exists and is executable, and prints a warning if either of these
checks fails. It's also possible to send command-line options to the
program. Things after the name of the executable are sent as
command-line options to the CGI program.

    $tester->set_cgi_executable ('my.cgi', '-o', 'xyz');

=head2 set_verbosity

    $tester->set_verbosity (1);

This turns on or off messages from the module informing you of what it
is doing.

=head2 set_no_check_content

    $tester->set_no_check_content (1);

This turns off testing of the "Content-Type" HTTP header. For example
if you want to send redirects or "not modified" responses, you usually
will not send any content, but just the HTTP headers, so you don't
need a "Content-Type" header.

=head1 INPUT AND OUTPUT

=head2 Possible options

The following values may be set in the argument to L</run>,
C<%options>.

=over

=item CONTENT_TYPE

     $options{CONTENT_TYPE} = 'GET';
     $test->run (\%options);

The content type of the input. This is used when REQUEST_METHOD is
POST. It is usually either C<application/x-www-form-urlencoded> or
C<multipart/form-data>. C<application/x-www-form-urlencoded> is the
default value for CGI form queries.

=item die_on_failure

     $options{die_on_failure} = 1;
     $test->run (\%options);

If this is set to a true value, the module "dies" if any test
fails. If this is set to a false value then the program does not die,
regardless of whether tests fail or not.

=item expect_errors

     $options{expect_errors} = 1;
     $test->run (\%options);

Set to a true value if the program is expected to produce errors. This
inverts the test that errors are not printed, and makes it into a test
that errors are printed, so if your program doesn't print an error it
will fail a test.

=item expect_failure

    $options{expect_failure} = 1;
    $test->run (\%options);

Expect the CGI program to exit with a non-zero error status. This
switches off the test that the exit status of the executable is
zero. It does not actually test what error status the CGI program
exits with, so a zero error status will not cause a failed test. Note
carefully that this behaviour is slightly different from that of
L</expect_errors> in that it does not invert the test, but skips it.

=item html

     $options{html} = 1;
     $test->run (\%options);

If set to a true value, validate the html using a validator you have
set up with L</set_html_validator>.

=item HTTP_COOKIE

     $options{HTTP_COOKIE} = 'nice=day';
     $test->run (\%options);

This option sets the environment variable C<HTTP_COOKIE> to whatever
its value is. The environment variable is then unset at the end of the
test run.

=item input

     $options{input} = $post_input;
     $test->run (\%options);

Input to send to the CGI program with a POST request. The environment
variable CONTENT_LENGTH in the CGI program is automatically set to the
length of this variable. See also L</BUGS>.

=item json

     $options{json} = 1;
     $test->run (\%options);

Validate the body of the output as JSON using L<JSON::Parse>. This is
run after decompression.

=item no_check_content

     $options{no_check_content} = 1;
     $test->run (\%options);

If this is set to a true value, the program does not check for the
"Content-Type" header line produced by the CGI. This option is for the
case where the CGI produces, for example, a "Location: " response
without a body. See also the L</set_no_check_content> method.

=item QUERY_STRING

     $options{QUERY_STRING} = "word=babies";
     $test->run (\%options);

This option sets the environment variable C<QUERY_STRING> to whatever
its value is. The environment variable is then unset at the end of the
test run.

=item REMOTE_ADDR

     $options{QUERY_STRING} = "127.0.0.1";
     $test->run (\%options);

This option sets the environment variable C<REMOTE_ADDR> to whatever
its value is. The environment variable is then unset at the end of the
test run.

=item REQUEST_METHOD

     $options{REQUEST_METHOD} = "GET";
     $test->run (\%options);

This option may be set to one of POST, GET and HEAD. The module then
sets the environment variable REQUEST_METHOD to this value. If not set
at all, the module sets it to a default and prints a warning
message. You can also set this to any other value you want, like
C<OPTIONS> or something, but the module prints a warning
message. There is currently no way to switch off the warnings. See
also L</BUGS>.

=back

=head2 Outputs

The various outputs of the CGI program are also put into C<%options>.

=over

=item body

    my %options;
    $test->run (\%options);
    my $body = $options{body};

The body of the CGI output, the part after the headers. If you have
requested compression testing with L</do_compression_test>, this will
be the output after uncompression.

This should be upgraded into Unicode using the character encoding
specified with L</expect_charset>, but it isn't at the moment. See
also L</BUGS>.

=item content_length

The content length of your input in bytes, if you are making a C<POST>
request. Note that this is the length in bytes, so it may differ from
the return value of Perl's length function.

[% INCLUDE "length.pl" | xtidy %]

=item error_output

    my %options;
    $test->run (\%options);
    my $error_output = $options{error_output};

Any errors output by the CGI program. This is an empty string if there
were no errors, not the undefined value. If you are expecting to get
error messages, remember to set L</expect_errors>, otherwise any error
output at all will cause a test to fail.

=item exit_code

    $test->run (\%options);
    my $exit_code = $options{exit_code};

The exit value of the CGI program, the value of C<$status> in 

    $status = system ('example.cgi');

=item header

    $test->run (\%options);
    my $header = $options{header};

The header part of the CGI output. This is split from L</output>.

=item headers

    $test->run (\%options);
    my $headers = $options{headers};
    print $headers->{'content-type'};

The received headers, parsed and put into lower case, with the
key/value pairs of the hash reference C<$headers> the keys and values
from the HTTP header.

=item output

    $test->run (\%options);
    my $output = $options{output};

The entire output of the CGI program, unprocessed. If you have
requested compression testing with L</do_compression_test>, this will
contain binary compressed data.

=back

=head1 TESTS APPLIED

The following tests are applied:

=over

=item CGI executable exists

This test is run by L</set_cgi_executable>.

=item CGI executable is an executable file

This test is run by L</set_cgi_executable>. This test is skipped on Windows.

=item The exit status of the CGI program is zero

This test is run by L</run>. It may be skipped using L</expect_failure>.

=item The program has produced output

This test is run by L</run>.

=item The program does not produce error output

This test is run by L</run>. It may be inverted using
L</expect_errors>. It's meant to catch things like stray fprintf
statements in the executable.

=item The program has printed headers

This test is run by L</run>. This tests for some headers followed by a
blank line.

=item Each header is correctly formatted

This test is run by L</run>. It's meant to catch things like stray
printf statements in the executable, or forgetting to print a
header. The header format is as defined by L</Specification for HTTP
headers>. Each line of the header is checked as a separate test.

=item The program has printed a Content-Type header

This test is run by L</run>. It may be skipped using L</no_check_content>.

=item The charset parameter of the Content-Type header is right

This test is run by L</run>. It is an optional test switched on by the
L</expect_charset> method.

=item The body of the output is compressed

This test is run by L</run>. It is an optional test switched on by the
L</do_compression_test> method. This only supports C<gzip> encodings.

=item The body of the output is in the correct encoding

This test is run by L</run>. It is an optional test switched on by the
L</expect_charset> method. If the parameter set by L</expect_charset>
is not UTF-8, it runs a test that the encoding of the output is as
expected.

=item Caching works correctly

This test is run by L</run>. It tests the following:

=over

=item The CGI is producing a Last-Modified header

If this test fails, it assumes that the CGI cannot understand
If-Modified-Since requests and does not perform the following tests.

=item The CGI's Last-Modified header contains a date which HTTP::Date can parse

=item Basic tests are all run again

All of the tests of basic functioning, such as producing output and
correctly-formatted HTTP headers, are re-run under the
"If-Modified-Since" regimen.

=item The CGI is correctly producing a 304 response

It is tested whether the program is correctly producing a 304 response
when sent an "If-Modified-Since" request using the Last-Modified date
which it supplied in the above test.



=back

=item The output is valid HTML

This test is run by L</run>. It is an optional test switched on by the
L</html> parameter. At the moment, this does not cause a test of the
content type header. See L</BUGS>.

=item The output is valid JSON.

This test is run by L</run>. It is an optional test switched on by the
L</json> parameter. At the moment, this does not cause a test of the
content type header. See L</BUGS>.

=back

=head1 BUGS

This assumes line endings are C<\n> in some places. There may be
problems with C<\r\n> support.

The tests use the internals of Test::Builder, and the pass/fail test
messages are somewhat disorganized (see also L</HISTORY>).

The mixture of methods (see L</METHODS>) and options (see L</Possible
options>) is somewhat messy.

There are too many warnings which cannot be switched off, e.g. the
request method warnings.

The examples in this documentation are not machine-readable, and thus
probably contain many errors. (L<JSON::Create> is an example of a
module with documentation I think is good, because it's all extracted
from actual example programs, which are test-run during the build.)

The module has very few tests.

No check for MD5 checksums. For completeness, there probably should be
a check for this.

Not adapted for Microsoft Windows.

The program does not check the mime type in the Content-Type line,
despite having tests for HTML and JSON validity.

I wanted to include an example validator program in this distribution
but I cannot find anything remotely useable on CPAN. For example
L<HTML::Lint> seems to be very problematic.

=head1 SEE ALSO

=over

=item Specification of the Common Gateway Interface

The current specification of the Common Gateway Interface is RFC
(Request For Comments) 3875 by D. Robinson and K. Coar of The Apache
Software Foundation, dated October 2004. See
L<http://www.ietf.org/rfc/rfc3875>.

=item Specification for HTTP headers

This module's check for HTTP headers was written against the
specification on pages 15 and 16 of RFC 2616 by R. Fielding et al,
dated June 1999. See L<http://www.ietf.org/rfc/rfc2616.txt>.

=item L<The Common Gateway Interface|http://www.lemoda.net/cgi/simple-guide/index.html>

This is my own web page which explains some things about CGI. (The
strange design is because I used this as a test page for responsive
web design class.)

=back

=head1 DEPENDENCIES

This module depends on

=over

=item L<Carp>

Carp is used to print error messages.

=item L<Encode>

Encode is used for converting non-UTF-8 encodings into Unicode.

=item L<Gzip::Faster>

It is used to do the compression testing.

=item L<File::Temp>

File::Temp is used for the temporary files which store the input,
output, and error stream of the CGI program.

=item L<HTTP::Date>

HTTP::Date is used to check the dates, if you check caching.

=item L<JSON::Parse>

JSON::Parse is used to test JSON for validity.

=item L<Test::Builder>

For testing framework.

=item L<Unicode::UTF8>

Unicode::UTF8 is used for converting UTF-8 encodings into Perl's
internal Unicode.

=back

The module also used to depend on L<IPC::Run3>, but there were some
issues with this module messing around with the global variables. It
does something like C<binmode STDOUT>, which interferes with other
parts of the program, so that had to be removed.

=head1 HISTORY

This module started out as a test program for a CGI program written in
C. Originally, it didn't use the Perl Test::More-style framework, but
counted its pass and fail tests itself. I released the module to CPAN
because I couldn't find a similar alternative, and I thought it might
be useful to someone. Since the initial release I have changed it to
use the Test::More framework.



[% start_year='2011' %]
[% INCLUDE "author" %]
[% INCLUDE "terminology" %]
